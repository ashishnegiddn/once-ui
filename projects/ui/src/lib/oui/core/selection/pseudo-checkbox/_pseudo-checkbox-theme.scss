@import '../../theming/theming';

@mixin oui-pseudo-checkbox-theme($theme) {
  $is-dark-theme: map-get($theme, is-dark);
  $primary: map-get($theme, primary);
  $accent: map-get($theme, accent);
  $warn: map-get($theme, warn);
  $background: map-get($theme, background);

  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,
  // this does not work well with elements layered on top of one another. To get around this we
  // blend the colors together based on the base color and the theme background.
  $white-30pct-opacity-on-dark: #686868;
  $black-26pct-opacity-on-light: #b0b0b0;
  $disabled-color: if(
    $is-dark-theme,
    $white-30pct-opacity-on-dark,
    $black-26pct-opacity-on-light
  );
  $colored-box-selector: '.oui-pseudo-checkbox-checked, .oui-pseudo-checkbox-indeterminate';
  .oui-pseudo-checkbox {
    color: oui-color(map-get($theme, foreground), secondary-text);
    &::after {
      color: oui-color($background, background);
    }
  }
  // Default to the accent color. Note that the pseudo checkboxes are meant to inherit the
  // theme from their parent, rather than implementing their own theming, which is why we
  // don't attach to the `oui-*` classes.
  .oui-pseudo-checkbox-checked,
  .oui-primary .oui-pseudo-checkbox-checked {
    background: oui-color(map-get($theme, primary));
  }
  .oui-accent .oui-pseudo-checkbox-checked {
    background: oui-color(map-get($theme, accent));
  }

  .oui-warn .oui-pseudo-checkbox-checked {
    background: oui-color(map-get($theme, warn));
  }

  .oui-pseudo-checkbox-checked {
    &.oui-pseudo-checkbox-disabled {
      background: $disabled-color;
    }
  }
}
